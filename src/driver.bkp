import pprint
import json

from CypherPersistenceApi import CypherPersistenceApi
from utilities.Utilities import DatabaseType
from utilities.Utilities import exitCommands
from utilities.Utilities import readQueriesFromFile
from utilities.executionTimer import ExecutionTimer

flag = True


def printWelcomeMessage():
    print('This implementation only runs for one persistence mode at a time.')
    print('Enter one of the following options:')
    print('1. Neo4j')
    print('2. Memgraph')
    print('Enter "exit" to exit.')


def requestDatabaseType():
    dbType = DatabaseType.Unknown
    plainTextDatabaseType = input()
    if plainTextDatabaseType == "1":
        dbType = DatabaseType.Neo4j
    elif plainTextDatabaseType == "2":
        dbType = DatabaseType.Memgraph
    elif exitCommands.__contains__(plainTextDatabaseType):
        dbType = DatabaseType.Exit
    return dbType


def handleSloppyUsers():
    print("That was sloppy, please enter only a number, either 0 or 1.")
    printWelcomeMessage()
    return requestDatabaseType()


def requestQuery():
    print("Enter a query to be run, type \"exit\" to exit:")
    query = input()
    global flag
    if exitCommands.__contains__(query):
        flag = False
    if query == "":
        query = "MATCH (n:TBox) RETURN n"
    return query


# JSON output function
class Object:
    def toJSON(self):
        return json.dumps(self, default=lambda o: o.__dict__,
                          sort_keys=True, indent=4)


def runQuery(query):
    # pprint.pprint(connection.execute(query))
    x = (connection.execute(query))
    # print(x.toJSON())
    pprint.pprint(x)


# printWelcomeMessage()
# databaseType = requestDatabaseType()
# while databaseType == DatabaseType.Unknown:
#     databaseType = handleSloppyUsers()
# if not databaseType == DatabaseType.Exit:
#     connection = CypherPersistenceApi(databaseType)
#     while flag:
#         query = requestQuery()
#         if not exitCommands.__contains__(query):
#             executionTimer = ExecutionTimer()
#             executionTimer.start()
#             runQuery(query)
#             executionTimer.stop()
#     connection.disconnect()
# print('The program will now exit.')


queries = readQueriesFromFile("queries.txt")
if queries[0] == "1":
    databaseType = DatabaseType.Neo4j
else:
    databaseType = DatabaseType.Memgraph
connection = CypherPersistenceApi(databaseType)
queries = queries[1:]
executionTimer = ExecutionTimer()
executionTimer.start()
for query in queries:
    print("\n==\n")
    runQuery(query)
executionTimer.stop()
connection.disconnect()
print('The program will now exit.')
